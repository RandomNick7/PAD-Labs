# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import game_routes_pb2 as game__routes__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in game_routes_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GameRoutesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getLobbies = channel.unary_unary(
                '/game_routes.GameRoutes/getLobbies',
                request_serializer=game__routes__pb2.Empty.SerializeToString,
                response_deserializer=game__routes__pb2.LobbyList.FromString,
                _registered_method=True)
        self.getLobby = channel.unary_unary(
                '/game_routes.GameRoutes/getLobby',
                request_serializer=game__routes__pb2.LobbyID.SerializeToString,
                response_deserializer=game__routes__pb2.LobbyDetails.FromString,
                _registered_method=True)
        self.makeLobby = channel.unary_unary(
                '/game_routes.GameRoutes/makeLobby',
                request_serializer=game__routes__pb2.LobbyMakeInfo.SerializeToString,
                response_deserializer=game__routes__pb2.LobbyDetails.FromString,
                _registered_method=True)
        self.joinLobby = channel.unary_unary(
                '/game_routes.GameRoutes/joinLobby',
                request_serializer=game__routes__pb2.HybridID.SerializeToString,
                response_deserializer=game__routes__pb2.LobbyDetails.FromString,
                _registered_method=True)
        self.leaveLobby = channel.unary_unary(
                '/game_routes.GameRoutes/leaveLobby',
                request_serializer=game__routes__pb2.HybridID.SerializeToString,
                response_deserializer=game__routes__pb2.Status.FromString,
                _registered_method=True)
        self.getGame = channel.unary_unary(
                '/game_routes.GameRoutes/getGame',
                request_serializer=game__routes__pb2.GameID.SerializeToString,
                response_deserializer=game__routes__pb2.Status.FromString,
                _registered_method=True)
        self.endGame = channel.unary_unary(
                '/game_routes.GameRoutes/endGame',
                request_serializer=game__routes__pb2.GameID.SerializeToString,
                response_deserializer=game__routes__pb2.MapData.FromString,
                _registered_method=True)
        self.continueGame = channel.unary_unary(
                '/game_routes.GameRoutes/continueGame',
                request_serializer=game__routes__pb2.GameID.SerializeToString,
                response_deserializer=game__routes__pb2.Status.FromString,
                _registered_method=True)
        self.closeGame = channel.unary_unary(
                '/game_routes.GameRoutes/closeGame',
                request_serializer=game__routes__pb2.GameID.SerializeToString,
                response_deserializer=game__routes__pb2.Status.FromString,
                _registered_method=True)


class GameRoutesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getLobbies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLobby(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def makeLobby(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def joinLobby(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def leaveLobby(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def endGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def continueGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def closeGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameRoutesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getLobbies': grpc.unary_unary_rpc_method_handler(
                    servicer.getLobbies,
                    request_deserializer=game__routes__pb2.Empty.FromString,
                    response_serializer=game__routes__pb2.LobbyList.SerializeToString,
            ),
            'getLobby': grpc.unary_unary_rpc_method_handler(
                    servicer.getLobby,
                    request_deserializer=game__routes__pb2.LobbyID.FromString,
                    response_serializer=game__routes__pb2.LobbyDetails.SerializeToString,
            ),
            'makeLobby': grpc.unary_unary_rpc_method_handler(
                    servicer.makeLobby,
                    request_deserializer=game__routes__pb2.LobbyMakeInfo.FromString,
                    response_serializer=game__routes__pb2.LobbyDetails.SerializeToString,
            ),
            'joinLobby': grpc.unary_unary_rpc_method_handler(
                    servicer.joinLobby,
                    request_deserializer=game__routes__pb2.HybridID.FromString,
                    response_serializer=game__routes__pb2.LobbyDetails.SerializeToString,
            ),
            'leaveLobby': grpc.unary_unary_rpc_method_handler(
                    servicer.leaveLobby,
                    request_deserializer=game__routes__pb2.HybridID.FromString,
                    response_serializer=game__routes__pb2.Status.SerializeToString,
            ),
            'getGame': grpc.unary_unary_rpc_method_handler(
                    servicer.getGame,
                    request_deserializer=game__routes__pb2.GameID.FromString,
                    response_serializer=game__routes__pb2.Status.SerializeToString,
            ),
            'endGame': grpc.unary_unary_rpc_method_handler(
                    servicer.endGame,
                    request_deserializer=game__routes__pb2.GameID.FromString,
                    response_serializer=game__routes__pb2.MapData.SerializeToString,
            ),
            'continueGame': grpc.unary_unary_rpc_method_handler(
                    servicer.continueGame,
                    request_deserializer=game__routes__pb2.GameID.FromString,
                    response_serializer=game__routes__pb2.Status.SerializeToString,
            ),
            'closeGame': grpc.unary_unary_rpc_method_handler(
                    servicer.closeGame,
                    request_deserializer=game__routes__pb2.GameID.FromString,
                    response_serializer=game__routes__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'game_routes.GameRoutes', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('game_routes.GameRoutes', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GameRoutes(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getLobbies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game_routes.GameRoutes/getLobbies',
            game__routes__pb2.Empty.SerializeToString,
            game__routes__pb2.LobbyList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getLobby(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game_routes.GameRoutes/getLobby',
            game__routes__pb2.LobbyID.SerializeToString,
            game__routes__pb2.LobbyDetails.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def makeLobby(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game_routes.GameRoutes/makeLobby',
            game__routes__pb2.LobbyMakeInfo.SerializeToString,
            game__routes__pb2.LobbyDetails.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def joinLobby(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game_routes.GameRoutes/joinLobby',
            game__routes__pb2.HybridID.SerializeToString,
            game__routes__pb2.LobbyDetails.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def leaveLobby(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game_routes.GameRoutes/leaveLobby',
            game__routes__pb2.HybridID.SerializeToString,
            game__routes__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game_routes.GameRoutes/getGame',
            game__routes__pb2.GameID.SerializeToString,
            game__routes__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def endGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game_routes.GameRoutes/endGame',
            game__routes__pb2.GameID.SerializeToString,
            game__routes__pb2.MapData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def continueGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game_routes.GameRoutes/continueGame',
            game__routes__pb2.GameID.SerializeToString,
            game__routes__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def closeGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game_routes.GameRoutes/closeGame',
            game__routes__pb2.GameID.SerializeToString,
            game__routes__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
