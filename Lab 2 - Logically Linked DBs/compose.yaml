name: game_deployement

services:
  redis-1:
    image: redis:7
    ports:
      - "16001:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 5s
      retries: 5
  
  redis-2:
    image: redis:7
    ports:
      - "16002:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 5s
      retries: 5
  
  redis-3:
    image: redis:7
    ports:
      - "16003:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 5s
      retries: 5
      
  redis-4:
    image: redis:7
    ports:
      - "16004:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 5s
      retries: 5
    depends_on:
      redis-1:
        condition: service_healthy
      redis-2:
        condition: service_healthy
      redis-3:
        condition: service_healthy
      
  redis-5:
    image: redis:7
    ports:
      - "16005:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 5s
      retries: 5
    depends_on:
      redis-1:
        condition: service_healthy
      redis-2:
        condition: service_healthy
      redis-3:
        condition: service_healthy
      
  redis-6:
    image: redis:7
    ports:
      - "16006:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 5s
      retries: 5
    depends_on:
      redis-1:
        condition: service_healthy
      redis-2:
        condition: service_healthy
      redis-3:
        condition: service_healthy

  redis-cluster:
    image: redis:7
    command: redis-cli --cluster create redis-1:6379 redis-2:6379 redis-3:6379 redis-4:6379 redis-5:6379 redis-6:6379 --cluster-replicas 1 --cluster-yes
    depends_on:
      redis-1:
        condition: service_healthy
      redis-2:
        condition: service_healthy
      redis-3:
        condition: service_healthy
      redis-4:
        condition: service_healthy
      redis-5:
        condition: service_healthy
      redis-6:
        condition: service_healthy


  prometheus:
    image: prom/prometheus:v2.51.1
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus
    depends_on:
      gateway:
        condition: service_healthy
      user-service:
        condition: service_healthy
      game-service:
        condition: service_healthy


  grafana:
    image: grafana/grafana:10.4.12
    ports:
      - "3000:3000"
    environment:
      - GF_LOG_LEVEL=silent
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=pass
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana


  service-discovery:
    build:
      context: ./Service_Discovery
      dockerfile: Dockerfile
    ports:
      - "4444:4444"
    healthcheck:
      test: curl --fail http://localhost:4444/status
      interval: 3s
      timeout: 5s
      retries: 5
    stop_grace_period: 2s


  gateway:
    build:
      context: ./Gateway
      dockerfile: Dockerfile
    ports:
      - "6969:6969"
    healthcheck:
      test: curl --fail http://localhost:6969/status
      interval: 3s
      timeout: 5s
      retries: 5
    environment:
      SERVICE_DISCOVERY_URL: http://service-discovery:4444
      JWT_SECRET: token_secret
    stop_grace_period: 2s
    depends_on:
      service-discovery:
        condition: service_healthy
      redis-1:
        condition: service_healthy
      redis-2:
        condition: service_healthy
      redis-3:
        condition: service_healthy
      redis-4:
        condition: service_healthy
      redis-5:
        condition: service_healthy
      redis-6:
        condition: service_healthy


  user-db:
    image: bitnami/postgresql:17
    ports:
      - "5433:5432"
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_USERNAME=su_user
      - POSTGRESQL_PASSWORD=secret_pass_user
      - POSTGRESQL_DATABASE=user_data
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: pg_isready -U su_user -d user_data
      interval: 3s
      timeout: 5s
      retries: 5
    volumes:
      - master_user_data:/bitnami/postgresql

  user-slave-db:
    image: bitnami/postgresql:17
    deploy:
      replicas: 3
    ports:
      - "5432"
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_MASTER_HOST=user-db
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - ALLOW_EMPTY_PASSWORD=yes
    depends_on:
      - user-db


  game-db:
    image: postgres:17
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: game_data
      POSTGRES_USER: su_game
      POSTGRES_PASSWORD: secret_pass_game
    healthcheck:
      test: pg_isready -U su_game -d game_data
      interval: 3s
      timeout: 5s
      retries: 5
    volumes:
      - pg_game_data:/var/lib/postgresql/data


  user-service:
    build:
      context: ./User_Service
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 3
    ports:
      - "9000"
      - "9900"
    environment:
      SERVICE_DISCOVERY_URL: http://service-discovery:4444
      DATABASE_URL: postgres://su_user:secret_pass_user@user-db:5432/user_data
      JWT_SECRET: token_secret
    healthcheck:
      test: grpc_health_probe -addr=:9000
      interval: 3s
      timeout: 5s
      retries: 5
    stop_grace_period: 2s
    depends_on:
      user-db:
        condition: service_healthy
      service-discovery:
        condition: service_healthy


  game-service:
    build:
      context: ./Game_Service
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 3
    ports:
      - "7000"
      - "7500"
      - "7700"
    environment:
      SERVICE_DISCOVERY_URL: http://service-discovery:4444
      DATABASE_URL: postgres://su_game:secret_pass_game@game-db:5432/game_data
    healthcheck:
      test: grpc_health_probe -addr=:7000
      interval: 3s
      timeout: 5s
      retries: 5
    stop_grace_period: 2s
    depends_on:
      game-db:
        condition: service_healthy
      service-discovery:
        condition: service_healthy


volumes:
  master_user_data:
    driver: local
  pg_game_data:
  prometheus_data:
  grafana_data: